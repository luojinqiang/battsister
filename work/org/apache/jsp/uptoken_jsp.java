/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2016-01-20 11:06:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.qiniu.util.StringMap;
import com.baje.sz.ajax.AjaxXml;
import com.qiniu.util.UrlSafeBase64;
import com.hanyou.util.BasicType;
import net.sf.json.JSONObject;
import com.qiniu.util.Auth;
import com.baje.sz.util.AppConf;
import com.qiniu.storage.UploadManager;
import java.util.*;

public final class uptoken_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.qiniu.util.StringMap");
    _jspx_imports_classes.add("com.baje.sz.ajax.AjaxXml");
    _jspx_imports_classes.add("com.qiniu.util.Auth");
    _jspx_imports_classes.add("com.hanyou.util.BasicType");
    _jspx_imports_classes.add("com.baje.sz.util.AppConf");
    _jspx_imports_classes.add("com.qiniu.util.UrlSafeBase64");
    _jspx_imports_classes.add("com.qiniu.storage.UploadManager");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

/*
	UploadManager uploadManager=getUploadManage();
		String AccessKey=AppConf.getconf().get("AccessKey");
		String SecretKey=AppConf.getconf().get("SecretKey");
		Auth auth=Auth.create(AccessKey,SecretKey);
		String token=auth.uploadToken("myspace");
		/*String saveUrl=UrlSafeBase64.encodeToString("myspace:"+file_name+".jpg");
		String token=auth.uploadToken("myspace", null, 3600,new StringMap().put("persistentPipeline", "mps").
		put("persistentOps", "vframe/jpg/offset/2/w/480/h/360|saveas/"+saveUrl),true);
*/

UploadManager uploadManager=new UploadManager();
String AccessKey=AppConf.getconf().get("AccessKey");
String SecretKey=AppConf.getconf().get("SecretKey");
Auth auth=Auth.create(AccessKey,SecretKey);
 String file_name=AjaxXml.Get_Date("now", "YY04MMDDHHMISS_") + AjaxXml.Getrandom(4);
 String saveUrl=UrlSafeBase64.encodeToString("myspace:"+file_name+".jpg");
 System.out.print(file_name+".jpg");
String token=auth.uploadToken("myspace", null, 3600,new StringMap().put("persistentPipeline", "mps"). 
put("persistentOps", "vframe/jpg/offset/2/w/480/h/360|saveas/"+saveUrl),true); 
/* String token=auth.uploadToken("myspace");  */
JSONObject json=new JSONObject();
json.put("uptoken",token);
out.print(json);

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
