/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2015-12-24 07:40:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.action.userjson;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.baje.sz.ajax.AjaxXml;
import com.baje.sz.ajax.LogUtility;
import com.baje.sz.util.RequestUtil;
import com.hanyou.util.ApkUpdate;
import com.hanyou.util.ExtractAPK;
import net.sf.json.JSONObject;
import java.util.List;
import com.baje.sz.util.AppConf;

public final class MobileAppVersion_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.baje.sz.ajax.AjaxXml");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.hanyou.util.ExtractAPK");
    _jspx_imports_classes.add("com.baje.sz.util.AppConf");
    _jspx_imports_classes.add("com.hanyou.util.ApkUpdate");
    _jspx_imports_classes.add("com.baje.sz.util.RequestUtil");
    _jspx_imports_classes.add("com.baje.sz.ajax.LogUtility");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    request.setCharacterEncoding("utf-8");
    String allowUrl = "http://www.fitness-smart.com";
    response.addHeader("Access-Control-Allow-Origin", allowUrl);
    //String sys_type = ru.getString("sys_type");
    ExtractAPK extractAPK = new ExtractAPK();
    String versionCode = "1012";
    String versionName = "1.0.12";
    String updateInfo = "";
    JSONObject backjson = new JSONObject();
    RequestUtil ru = new RequestUtil(request);
    //用户来源，渠道号
    String mem_source = ru.getString("mem_source", "");
    StringBuffer appName = new StringBuffer("Fitness_v");
    if (mem_source != null && !"".equals(mem_source)) {
        appName.append(mem_source);
    }
    try {
        //按时间降序取出Update目录下所有apk文件的路径名
        List apkUrl = ApkUpdate.getFileSort(AppConf.getconf().get("Filepath") + "/update/android", appName.toString());
        if (apkUrl.size() == 0) {
            backjson.put("type", false);
            backjson.put("msg", "服务器暂无版本");
            response.getWriter().write(backjson.toString());
            return;
        }
        JSONObject object = extractAPK.getVersion(apkUrl.get(0).toString());
        if (object.getBoolean("type")) {
            versionCode = object.getString("versionCode");
            versionName = object.getString("versionName");
            updateInfo = object.optString("updateInfo", "");
        }
        backjson = object;
        backjson.put("downloadUrl", AppConf.getconf().get("webserver") + "/update/android/" + appName + versionName + ".apk");
        backjson.put("updateLog", updateInfo);
        backjson.put("is_qiangzhi", 0);
        backjson.put("type", true);
        backjson.put("msg", "获取成功");
       /*  LogUtility.log("versaion-ajaxRequest="+AjaxXml.getParameterStr(request));
        LogUtility.log("version="+backjson.toString()); */
    } catch (Exception e) {
        e.printStackTrace();
        backjson.put("is_qiangzhi", 0);
        backjson.put("type", false);
        backjson.put("msg", "已是最新版本");
    }

    response.getWriter().write(backjson.toString());

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
