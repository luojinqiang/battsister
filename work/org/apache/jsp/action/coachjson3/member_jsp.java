/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2015-12-30 02:54:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.action.coachjson3;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.baje.sz.util.*;
import com.hanyou.coachjson3.MemberApi;
import com.hanyou.util.FitnessBasicType;
import com.baje.sz.ajax.LogUtility;

public final class member_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.baje.sz.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.hanyou.util.FitnessBasicType");
    _jspx_imports_classes.add("com.hanyou.coachjson3.MemberApi");
    _jspx_imports_classes.add("com.baje.sz.ajax.LogUtility");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    request.setCharacterEncoding("utf-8");
    RequestUtil ru = new RequestUtil(request);
    String action = ru.getString("action");
    if (action.equals("setMemberAdd")) {//教练端添加学员
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberAdd(request).toString());
        return;
    }
    if (action.equals("getMemberInfo")) {//教练端扫描学员的二维码后获取学员的信息
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.getMemberInfo(request).toString());
        return;
    }

    if (action.equals("setMemberTineng")) {//教练端添加学员体能
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberTineng(request).toString());
        return;
    }
    if (action.equals("getMemberTinengList")) {//教练获取学员体能列表
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.getMemberTinengList(request).toString());
        return;
    }
    if (action.equals("setMemberTice")) {//教练端添加学员体侧
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberTice(request).toString());
        return;
    }
    if (action.equals("getMemberTiceList")) {//教练获取学员体测列表
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.getMemberTiceList(request).toString());
        return;
    }
    if (action.equals("setMemberTitai_pic")) {//教练端添加学员体态照片
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberTitai_pic(request).toString());
        return;
    }
    if (action.equals("setMemberTitai_tv")) {//教练端添加学员体态视频
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberTitai_tv(request).toString());
        return;
    }
    if (action.equals("setMemberTitai_B")) {//教练端添加学员体态背面
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberTitai_B(request).toString());
        return;
    }
    if (action.equals("setMemberTitai_C")) {//教练端添加学员体态侧面
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberTitai_C(request).toString());
        return;
    }
    if (action.equals("getMemberTitaiList")) {//教练端获取体态列表
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.getMemberTitaiList(request).toString());
        return;
    }
    if (action.equals("getFitnessTarget")) {//获取健身目标列表
        response.getWriter().write(FitnessBasicType.getFitnessTarget(request).toString());
        return;
    }
    if (action.equals("setFitnessTarget")) {//添加和更新更新健身目标
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setFitnessTarget(request).toString());
        return;
    }
    if (action.equals("getActionType")) {//获取健身课程分类
        response.getWriter().write(FitnessBasicType.getActionType().toString());
        return;
    }
    if (action.equals("getActionTypeInfo")) {//获取健身健身课程分类下的列表
        response.getWriter().write(FitnessBasicType.getActionTypeInfo(request).toString());
        return;
    }
    if (action.equals("setMemberNote")) {//添加和更新会员备忘录
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberNote(request).toString());
        return;
    }
    if (action.equals("setMemberNoteDel")) {//删除会员备忘录
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setMemberNoteDel(request).toString());
        return;
    }
    if (action.equals("getMemberNoteList")) {//添加和更新会员备忘录列表
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.getMemberNoteList(request).toString());
        return;
    }
    if (action.equals("getMyMemberList")) {//获取我的会员列表
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.getMyMemberList(request).toString());
        return;
    }
    if (action.equals("getMemberIndex")) {//获取我的会员首页
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.getMemberIndex(request).toString());
        return;
    }

    if("getBookClassInfo".equals(action)){//教练端3.0获取预约课程详情
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.getBookClassInfo(request).toString());
        return;
    }
    if("setClassSummary".equals(action)){//教练端3.0,更新课程总结
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setClassSummary(request).toString());
        return;
    }
    if("setFoodAdvice".equals(action)){//教练端3.0,更新饮食建议
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setFoodAdvice(request).toString());
        return;
    }
    if("setBookClass".equals(action)){//超教3.0-添加/更新课程设计(多个添加/更新)
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setBookClass(request).toString());
        return;
    }
    if("setBookClassDel".equals(action)){//教练端3.0删除该预约下的课程
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setBookClassDel(request).toString());
        return;
    }
    if("setBookClassOver".equals(action)){//教练端3.0完成整个的课程
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setBookClassOver(request).toString());
        return;
    }
    if("setBookClassActionOver".equals(action)){//教练端3.0完成某一个课程下的动作
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.setBookClassActionOver(request).toString());
        return;
    }
    if("delBookClassAction".equals(action)){//教练端3.0删除某一个课程下的动作
        MemberApi memberApi = new MemberApi();
        response.getWriter().write(memberApi.delBookClassAction(request).toString());
        return;
    }
    if("updateBookTime".equals(action)){//教练端3.0更新用户预约的时间
    	 MemberApi memberApi = new MemberApi();
         response.getWriter().write(memberApi.updateBookTime(request).toString());
         return;
    }
    if("updateClassAction".equals(action)){//教练端更新课程动作
    	 MemberApi memberApi = new MemberApi();
         response.getWriter().write(memberApi.updateClassAction(request).toString());
         return;
    }
    if("updateMemberInfo".equals(action)){//教练端更新学员资料
    	 MemberApi memberApi = new MemberApi();
         response.getWriter().write(memberApi.updateMemberInfo(request).toString());
         return;
    }
    if("deleteMember".equals(action)){//教练端解除学员关系
    	 MemberApi memberApi = new MemberApi();
         response.getWriter().write(memberApi.deleteMember(request).toString());
         return;
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
