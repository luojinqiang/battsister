/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2015-12-02 07:00:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.action.coachjson3;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.Iterator;
import com.baje.sz.util.*;
import com.baje.sz.ajax.*;
import com.soft4j.httpupload4j.*;
import com.hanyou.coachjson.CoachMember;
import com.hanyou.userjson.BodyMeasureAPI;

public final class coach_005fmember_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.soft4j.httpupload4j");
    _jspx_imports_packages.add("com.baje.sz.ajax");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.baje.sz.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.hanyou.userjson.BodyMeasureAPI");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.hanyou.coachjson.CoachMember");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    request.setCharacterEncoding("utf-8");
    CoachMember cm = new CoachMember();
    RequestUtil ru = new RequestUtil(request);
    String action = ru.getString("action");
    System.out.print("action---->"+action);
    if (action.equals("getCurrent")) {//获取当前页面信息
        response.getWriter().write(cm.getCurrent(request).toString());
        return;
    }
    if (action.equals("getCurrentOpen")) {//获取进入健身房的会员
        response.getWriter().write(cm.getCurrentOpen(request).toString());
        return;
    }
    if (action.equals("getMyMember")) {//获取我的私教会员
        response.getWriter().write(cm.getMyMember(request).toString());
        return;
    }
    if (action.equals("getMemberInfo")) {//获取会员基本信息
        response.getWriter().write(cm.getMemberInfo(request).toString());
        return;
    }
    if (action.equals("getFitnessResultList")) {//获取会员健身成果
        response.getWriter().write(cm.getFitnessResultList(request).toString());
        return;
    }
    if ("getMemberPlanList".equals(action)) {//2015-08-25 获取私教会员的健身计划列表
        response.getWriter().write(cm.getMemberPlanList(request).toString());
        return;
    }
    if ("getMemberBookList".equals(action)) {//获取私教会员的预约列表
        response.getWriter().write(cm.getMemberBookList(request).toString());
        return;
    }
    if ("getMemberBodyMeasureByDate".equals(action)) {//获取私教会员指定日期或指定预约的体侧、体态、体能数据
        response.getWriter().write(cm.getMemberBodyMeasureByDate(request).toString());
        return;
    }
    if ("getMemberBodyMeasureDate".equals(action)) {//获取有体态、体能、体测数据的日期数组
        response.getWriter().write(cm.getMemberBodyMeasureDate(request).toString());
        return;
    }
    if ("getMyTeamCourse".equals(action)) {//教练端获取团队私教课程
        response.getWriter().write(cm.getMyTeamCourse(request).toString());
        return;
    }
    if ("addTeamCourse".equals(action)) {//教练端添加团队课程
        response.getWriter().write(cm.addTeamCourse(request).toString());
        return;
    }
    if ("getUserBookMeasure".equals(action)) {//创建体测获取用户的预约体测列表
        response.getWriter().write(cm.getUserBookMeasure(request).toString());
        return;
    }
    //上传体测、体能数据
    if ("setMeasure".equals(action)) {
        response.getWriter().write(new BodyMeasureAPI().setMeasure(request).toString());
        return;
    }
    //上传用户的体态数据(背面、侧面)
    if ("setMeasureOfPosture".equals(action)) {
        String result = new BodyMeasureAPI().setMeasureOfPosture(request).toString();
        response.getWriter().write(result);
        return;
    }
    if ("updateMemberCardType".equals(action)) {//教练端更新用户的会员卡类型
        String result = cm.updateMemberCardType(request).toString();
        response.getWriter().write(result);
        return;
    }
    if ("getTuanDuiDetails".equals(action)) {//获取团队私教的预约内容
        String result = cm.getTuanDuiDetails(request).toString();
        response.getWriter().write(result);
        return;
    }
    if ("updateTuanDuiBook".equals(action)) {//更新用户团队私教
        String result = cm.updateTuanDuiBook(request).toString();
        response.getWriter().write(result);
        return;
    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
