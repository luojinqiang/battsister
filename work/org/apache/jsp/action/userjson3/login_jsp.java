/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2016-01-14 11:42:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.action.userjson3;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.Iterator;
import com.baje.sz.util.*;
import com.baje.sz.ajax.*;
import com.soft4j.httpupload4j.*;
import com.hanyou.userjson.Loginapi;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.soft4j.httpupload4j");
    _jspx_imports_packages.add("com.baje.sz.ajax");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.baje.sz.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("com.hanyou.userjson.Loginapi");
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    request.setCharacterEncoding("utf-8");
    Selectic utildb = new Selectic();
    AjaxDate datediff = new AjaxDate();
    Loginapi loginapi = new Loginapi();
    RequestUtil ru = new RequestUtil(request);
    String action = ru.getString("action");
    String jsoncallback = ru.getString("jsoncallback");
    String username = ru.getString("username");
    String pwd = ru.getString("password");
    //用户登录操作
    if (action.equals("login")) {
        response.getWriter().write(jsoncallback + loginapi.checkUserLogin(username, pwd, ru.getIps(), request, response));
        return;
    }
    //用户退出操作
    if (action.equals("loginout")) {
        response.getWriter().write(jsoncallback + loginapi.logout(request, response));
        return;
    }
    //普通用户注册
    if (action.equals("reg")) {
        response.getWriter().write(loginapi.memberReg(request).toString());
        return;
    }
    //手机号码注册
    if (action.equals("mobilereg")) {
        response.getWriter().write(loginapi.memberMobileReg(request, response).toString());
        return;
    }

    if (action.equals("memberinfoedit")) {//修改个人资料
        response.getWriter().write(loginapi.memberInfoEdit(request).toString());
        return;
    }
    if (action.equals("setpwd")) {//忘记密码--重设密码
        response.getWriter().write(loginapi.memberSetPwd(request).toString());
        return;
    }
    if (action.equals("setuserother")) {//第三方注册
        response.getWriter().write(loginapi.memberSetUserOther(request).toString());
        return;
    }
    if (action.equals("setuser")) {//第三方注册后绑定
        response.getWriter().write(loginapi.memberSetUser(request).toString());
        return;
    }
    if (action.equals("getverify")) {//获取验证码
        response.getWriter().write(loginapi.getVerify(request).toString());
        return;
    }
    if (action.equals("getpwd")) {//忘记密码--检查验证码是否正确
        response.getWriter().write(loginapi.getPasswordMobile(request).toString());
        return;
    }
    if (action.equals("setmobile")) {//绑定手机
        response.getWriter().write(loginapi.setMobile(request).toString());
        return;
    }

    if (action.equals("setUserHeadPic")) {//修改用户头像
        response.getWriter().write(loginapi.setMemberHeadPic(request).toString());
        return;
    }
    //获取用户资料(二)
    if (action.equals("GetUserInfo")) {
        out.print(loginapi.GetUserInfo(request));
        return;
    }
    if ("updatePassword".equals(action)) {//登录后修改密码
        out.print(loginapi.updatePassword(request));
        return;
    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
